'use client';

import React, { useRef, useState } from 'react';
import { buildPlateUrl, type PlateKind } from '@/lib/plateUrl';

type Spec = {
  units: 'mm'|'in';
  assembly: { type: string; overall: { W:number; D:number; H:number } };
  materials?: { name:string; thickness:number }[];
};

type Plate = { kind: PlateKind; spec: unknown; host?: string; insert?: string };

async function loadImg(url: string): Promise<HTMLImageElement> {
  return new Promise((res, rej) => {
    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = () => res(img);
    img.onerror = (e) => rej(e);
    img.src = url;
  });
}

function roundRect(ctx: CanvasRenderingContext2D, x: number, y: number, w: number, h: number, r: number) {
  const rr = Math.min(r, w / 2, h / 2);
  ctx.beginPath();
  ctx.moveTo(x + rr, y);
  ctx.arcTo(x + w, y, x + w, y + h, rr);
  ctx.arcTo(x + w, y + h, x, y + h, rr);
  ctx.arcTo(x, y + h, x, y, rr);
  ctx.arcTo(x, y, x + w, y, rr);
  ctx.closePath();
}

async function drawHero(
  canvas: HTMLCanvasElement,
  opts: { spec: Spec; plates: Plate[]; origin: string; width?: number; height?: number }
) {
  const { spec, plates, origin } = opts;
  const W = opts.width ?? 1280;
  const H = opts.height ?? 720;
  canvas.width = W; canvas.height = H;
  const ctx = canvas.getContext('2d')!;

  // background
  const g = ctx.createLinearGradient(0, 0, 0, H);
  g.addColorStop(0, '#f7fafc'); g.addColorStop(1, '#e6eef7');
  ctx.fillStyle = g; ctx.fillRect(0, 0, W, H);

  // title
  ctx.fillStyle = '#111';
  ctx.font = '700 28px ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto';
  const title = `${(spec.assembly?.type || 'Project').replace(/\b\w/g, s=>s.toUpperCase())} — ${spec.assembly?.overall?.W}×${spec.assembly?.overall?.D}×${spec.assembly?.overall?.H} ${spec.units}`;
  ctx.fillText(title, 40, 56);

  // symbolic “top” rectangle for furniture
  const topW = Math.min(760, Math.max(360, spec.assembly.overall.W * 0.6));
  const topD = Math.min(420, Math.max(220, spec.assembly.overall.D * 0.35));
  ctx.fillStyle = '#e9ecef';
  roundRect(ctx, 40, 100, topW, topD, 18); ctx.fill();
  ctx.strokeStyle = '#9aa3ac'; ctx.lineWidth = 2; ctx.stroke();
  ctx.fillStyle = '#333';
  ctx.font = '600 16px ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto';
  ctx.fillText('Assembly preview (symbolic) + joinery plates', 40, 100 + topD + 28);

  // plate thumbnails
  const plateUrls = plates.map(p => origin + buildPlateUrl(p.kind, p.spec, { title: true, w: 900, font: 18, host: p.host, insert: p.insert }));
  const imgs = await Promise.allSettled(plateUrls.map(loadImg));

  const startX = 40 + topW + 40;
  const startY = 100;
  const thumbW = 360, thumbH = 200, gap = 16;

  ctx.font = '600 14px ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto';
  imgs.forEach((res, i) => {
    const x = startX, y = startY + i * (thumbH + gap);
    ctx.fillStyle = '#fff'; roundRect(ctx, x, y, thumbW, thumbH, 12); ctx.fill();
    ctx.strokeStyle = '#d0d7e2'; ctx.lineWidth = 1; ctx.stroke();
    const label = (plates[i]?.kind || 'plate').toUpperCase();
    ctx.fillStyle = '#111'; ctx.fillText(label, x + 12, y + 22);
    if (res.status === 'fulfilled') {
      const img = res.value; const pad = 10; const iw = thumbW - pad*2; const ih = thumbH - pad*2 - 16;
      ctx.drawImage(img, x + pad, y + pad + 12, iw, ih);
    } else {
      ctx.fillStyle = '#b00020'; ctx.fillText('Failed to load plate', x + 12, y + 48);
    }
  });

  // footer
  ctx.fillStyle = '#667085';
  ctx.font = '500 12px ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto';
  ctx.fillText('Generated by Cutlist (SVG plates + CAM are deterministic and cost-free)', 40, H - 20);
}

export default function JoineryHero({ spec, plates }: { spec: Spec; plates: Plate[] }) {
  const ref = useRef<HTMLCanvasElement>(null);
  const [busy, setBusy] = useState(false);

  const onRender = async () => {
    if (!ref.current) return;
    setBusy(true);
    try {
      await drawHero(ref.current, { spec, plates, origin: window.location.origin, width: 1280, height: 720 });
    } finally { setBusy(false); }
  };

  const onDownload = () => {
    const c = ref.current; if (!c) return;
    c.toBlob((blob) => {
      if (!blob) return;
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = 'joinery-preview.png';
      document.body.appendChild(a); a.click(); a.remove();
      URL.revokeObjectURL(a.href);
    }, 'image/png', 0.92);
  };

  return (
    <div style={{ border:'1px solid #eee', borderRadius:12, padding:12 }}>
      <div style={{ display:'flex', gap:8, marginBottom:8, flexWrap:'wrap' }}>
        <button onClick={onRender} disabled={busy}
          style={{ padding:'8px 12px', borderRadius:10, border:'1px solid #ccc', background:'#111', color:'#fff' }}>
          {busy ? 'Rendering…' : 'Render preview image'}
        </button>
        <button onClick={onDownload}
          style={{ padding:'8px 12px', borderRadius:10, border:'1px solid #ccc' }}>
          Download PNG
        </button>
      </div>
      <canvas ref={ref} style={{ width:'100%', height:'auto', display:'block' }} />
    </div>
  );
}
