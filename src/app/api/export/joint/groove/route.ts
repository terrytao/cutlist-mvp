// src/app/api/export/joint/groove/route.ts
export const runtime="nodejs"; export const dynamic="force-dynamic";
type Units="mm"|"in"; type Host={name:string;thickness:number;length?:number;width?:number}; type Ins={name:string;thickness:number}; type Groove={axis?:"X"|"Y";width:number;depth:number;offset?:number};
function parseSpecParam(raw:string){const t=raw.trim().replace(/^'+|'+$/g,"").replace(/^"+|"+$/g,"");try{return JSON.parse(t);}catch{}try{return JSON.parse(decodeURIComponent(t));}catch{} throw new Error("Bad ?spec; starts with: "+t.slice(0,40));}
function dimLinePx(x1:number,y1:number,x2:number,y2:number,label:string,fontPx:number,color="#555"){const dx=x2-x1,dy=y2-y1,len=Math.hypot(dx,dy)||1,ux=dx/len,uy=dy/len;const tick=Math.min(18,Math.max(10,len*0.08));const ax1x=x1+ux*tick,ax1y=y1+uy*tick,ax2x=x2-ux*tick,ax2y=y2-uy*tick;const off=12,lx=(x1+x2)/2-uy*off,ly=(y1+y2)/2+ux*off;return `
  <g stroke="${color}" fill="none" stroke-width="${Math.max(1.2,len*0.02)}"><line x1="${x1}" y1="${y1}" x2="${x2}" y2="${y2}" /></g>
  <text x="${lx}" y="${ly}" font-size="${fontPx}" text-anchor="middle" dominant-baseline="middle" fill="#111" stroke="#fff" stroke-width="${Math.max(2.5,fontPx*0.22)}" paint-order="stroke">${label}</text>`;}
export async function GET(req:Request){try{const url=new URL(req.url);const raw=url.searchParams.get("spec");if(!raw)return new Response("Missing ?spec",{status:400});const wpx=Math.min(1400,Math.max(480,Number(url.searchParams.get("w")||900)));const fontPx=Math.min(28,Math.max(12,Number(url.searchParams.get("font")||18)));const showTitle=url.searchParams.get("title")!=="0";
  const spec=parseSpecParam(raw) as {units:Units;host:Host;insert?:Ins;groove:Groove};const units=spec.units||"mm";const labelU=(v:number)=>`${v}${units==="mm"?" mm":" in"}`;
  const boardH=Math.max(160,Math.round(fontPx*8)),boardW=Math.max(300,Math.round(fontPx*14)),titleH=showTitle?Math.max(36,fontPx+12):Math.max(10,fontPx/2),footerH=Math.max(30,fontPx+6),viewW=wpx,viewH=titleH+boardH+footerH;const bx=(viewW-boardW)/2,by=titleH,bw=boardW,bh=boardH;
  const unitsToPxT=(boardH*0.7)/Math.max(spec.host.thickness,1),unitsToPxLen=spec.host.length?(boardH*0.8)/Math.max(spec.host.length,1):undefined,unitsToPxWid=spec.host.width?(boardW*0.8)/Math.max(spec.host.width,1):undefined;
  const ax=spec.groove.axis??"X";const gw=Math.max(8,(spec.groove.width??spec.insert?.thickness??spec.host.thickness)*unitsToPxT);const gd=Math.max(8,(spec.groove.depth??Math.min(spec.host.thickness*0.5,spec.insert?.thickness??spec.host.thickness))*unitsToPxT);
  let gx=bx,gy=by+bh/2-gw/2,glen=bw,gwide=gw;if(ax==="X"){if(spec.groove.offset!=null&&unitsToPxLen){const oy=spec.groove.offset*unitsToPxLen;gy=by+Math.max(gw/2,Math.min(bh-gw/2,oy))-gw/2;}} else {glen=bh;gwide=gw;gx=bx+bw/2-gw/2;gy=by;if(spec.groove.offset!=null&&unitsToPxWid){const ox=spec.groove.offset*unitsToPxWid;gx=bx+Math.max(gw/2,Math.min(bw-gw/2,ox))-gw/2;}}
  const title=`Groove — ${spec.host.name}${spec.insert?.name?` for ${spec.insert.name}`:""} (${units})`;
  const svg=`<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 ${viewW} ${viewH}" width="${viewW}" height="${viewH}"><style>.board{fill:#fafafa;stroke:#999;stroke-width:1.5}.cut{fill:#e6f0ff;stroke:#2563eb;stroke-width:2}.lbl{font-size:${fontPx}px;fill:#111;font-weight:700;font-family:ui-sans-serif,system-ui,-apple-system,"Segoe UI",Roboto,Arial}.tiny{font-size:${Math.max(13,fontPx-3)}px;fill:#333}</style>
  ${showTitle?`<text class="lbl" x="${viewW/2}" y="${Math.max(fontPx+8,titleH*0.65)}" text-anchor="middle">${title}</text>`:""}<rect class="board" x="${bx}" y="${by}" width="${bw}" height="${bh}"/>
  ${ax==="X"?`<rect class="cut" x="${gx}" y="${gy}" width="${glen}" height="${gwide}"/>`:`<rect class="cut" x="${gx}" y="${gy}" width="${gwide}" height="${glen}"/>`}
  ${ax==="X"?dimLinePx(gx+glen+26,gy,gx+glen+26,gy+gwide,"Width: "+labelU(spec.groove.width),fontPx):dimLinePx(gx,gy+glen+26,gx+gwide,gy+glen+26,"Width: "+labelU(spec.groove.width),fontPx)}
  ${dimLinePx(bx-26,by+bh-10,bx-26,by+bh-10-Math.max(18,fontPx*0.8),"Depth: "+labelU(spec.groove.depth),fontPx)}
  <text class="tiny" x="${bx+bw}" y="${by+bh+Math.max(18,fontPx)}" text-anchor="end">Host thickness: ${labelU(spec.host.thickness)}${spec.groove.offset!=null?` • Offset: ${labelU(spec.groove.offset)}`:""}</text></svg>`;
  return new Response(svg,{headers:{"Content-Type":"image/svg+xml","Cache-Control":"no-store"}});}catch(e:any){return new Response("Groove plate error: "+(e?.message||String(e)),{status:400});}}
